---
# tasks file for rabbitmq_cluster
- name: RabbitMQ | Ensure group "{{ rabbitmq_group }}" exists
  group:
    name: "{{ rabbitmq_group }}"
    state: present

- name: RabbitMQ | Ensure user "{{ rabbitmq_user }}" exists
  user:
    name: "{{ rabbitmq_user }}"
    shell: /bin/nologin
    state: present

- name: RabbitMQ | Create the rabbitmq network
  docker_network:
    name: "{{ rabbitmq_network_name }}"

- name: RabbitMQ | Run rabbitmq container(s)
  docker_container:
    name: "{{ 'rabbitmq%02x' | format(item) }}"
    hostname: "{{ 'rabbitmq%02x' | format(item) }}"
    image: "{{ rabbitmq_image }}"
    command:   rabbitmq-server
    state: started
    recreate: yes
    published_ports:
      - "{{item+8080}}:15672"
    networks:
      - name: "{{ rabbitmq_network_name }}"
    env:
      RABBITMQ_DEFAULT_USER: "{{rabbitmq_default_user}}"
      RABBITMQ_DEFAULT_PASS: "{{rabbitmq_default_password}}"
      RABBITMQ_ERLANG_COOKIE: "{{rabbitmq_erlang_cookie}}"
  loop: "{{ range(rabbitmq_no_containers)|list }}"

#Nodes are not (usually) ready that fast. 
- name: RabbitMQ | Sleep for 20 seconds and continue with play
  wait_for:
    timeout: 20
  delegate_to: localhost

# This next stanza deserves an explaination:
# In order to create the cluster, Nodes are told to stop the service, reset and
# join the node rabbitmq00 as a cluster member.
# This is achieved looping the <docker exec -it> command with a list of
# instructions, that is the cartesian product of the *list_of_actions* and the
# *list_of_nodes* (notice the "|product" filter in the middle of the loop).
# The list of nodes is made with the range primitive, but starting from 1, thus
# skipping the first node (00), as it is the target of all join commands.
- name: RabbitMQ | Make the nodes join the cluster
  command: "docker exec -it {{'rabbitmq%02x'|format(item[1])}} rabbitmqctl {{item[0]}}"
  loop: "{{['stop_app','reset','join_cluster rabbit@rabbitmq00','start_app'] | product(range(1,rabbitmq_no_containers)) | list}}"
